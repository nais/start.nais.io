name: Build and deploy main

on:
  push:
    branches:
      - main
    paths-ignore:
      - "*.md"

env:
  BASEIMAGE: "gcr.io/distroless/java17-debian11:nonroot"
  IMAGE_BASENAME: "europe-north1-docker.pkg.dev/nais-io/nais/images/start.nais.io"
  REGISTRY: "europe-north1-docker.pkg.dev/nais-io/nais/images"

jobs:
  build:
    name: Build all the things
    runs-on: ubuntu-20.04
    permissions:
      id-token: write
    outputs:
      tag: "${{ steps.dockertag.outputs.img_tag }}"
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@e83639073897b68de235d81a783b2221cc13def7 # ratchet:GitHubSecurityLab/actions-permissions/monitor@v1
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3
      - uses: actions/setup-java@3f07048e3d294f56e9b90ac5ea2c6f74e9ad0f98 # ratchet:actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"
      - uses: gradle/wrapper-validation-action@55e685c48d84285a5b0418cd094606e199cca3b6 # ratchet:gradle/wrapper-validation-action@v1
      - name: Build and test the app
        run: ./gradlew test shadowJar
      -  name: Install cosign
         uses: sigstore/cosign-installer@c3667d99424e7e6047999fb6246c0da843953c65 # ratchet:sigstore/cosign-installer@main
         with:
            cosign-release: 'v2.0.0'
      -  name: Verify distroless base image
         run: cosign verify --certificate-identity "keyless@distroless.iam.gserviceaccount.com" --certificate-oidc-issuer https://accounts.google.com" $BASEIMAGE
      - id: "gauth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d" # ratchet:google-github-actions/auth@v1.0.0
        with:
          workload_identity_provider: ${{ secrets.NAIS_IO_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: "gh-start-nais-io@nais-io.iam.gserviceaccount.com"
          token_format: "access_token"
      - name: Login to GitHub Docker Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # ratchet:docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: oauth2accesstoken
          password: "${{ steps.gauth.outputs.access_token }}"
      - name: Generate Docker image tag with short sha
        id: dockertag
        run: echo "img_tag=$(git rev-parse --short HEAD)" >> ${GITHUB_OUTPUT}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # ratchet:docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7 # ratchet:docker/setup-buildx-action@v2
      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # ratchet:docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          pull: true
          push: true
          tags: ${{ env.IMAGE_BASENAME }}:${{ steps.dockertag.outputs.img_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Sign the container image
        run: cosign sign --yes ${{ env.IMAGE_BASENAME }}@${{ steps.build-push.outputs.digest }}
      - name: Create SBOM
        run: ./gradlew cyclonedxBom
      - name: Attest image
        run: cosign attest --yes --predicate build/reports/bom.json --type cyclonedx ${{ env.IMAGE_BASENAME }}@${{ steps.build-push.outputs.digest }}

  deploy_to_prod:
    name: Deploy to prod-gcp
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3
      - uses: nais/deploy/actions/deploy@fdd2da585ae15831342aad18847dbcc4213f72fb # ratchet:nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: .nais/nais.yaml,.nais/alerts.yaml
          VARS: .nais/prod.yaml
          IMAGE: ${{ env.IMAGE_BASENAME }}:${{ needs.build.outputs.tag }}
